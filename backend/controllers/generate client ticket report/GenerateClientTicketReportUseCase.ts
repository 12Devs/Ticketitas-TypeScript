import { TicketRepository } from "../../db/TicketRepository";
import { ClientRepository } from "../../db/ClientRepository";
import { ApiError } from "../../errors/ApiError";

/**
 * Class for executing the generation of a data dictonary based upon the ticket sale information belonging to a client
 * @date 6/5/2023 - 11:53:25 AM
 *
 * @class GenerateClientTicketReportUseCase
 * @typedef {GenerateClientTicketReportUseCase}
 */
class GenerateClientTicketReportUseCase {

    private ticketRepository: TicketRepository;
    private clientRepository: ClientRepository;

    /**
     * Creates an instance of GenerateClientTicketReportUseCase.
     * @date 6/5/2023 - 11:53:25 AM
     *
     * @constructor Marks this part of the code as a constructor
     * @param {TicketRepository} ticketRepository TicketRepository class instance
     * @param {ClientRepository} clientRepository ClientRepository class instance
     */
    constructor (ticketRepository: TicketRepository, clientRepository: ClientRepository) {
        this.ticketRepository = ticketRepository;
        this.clientRepository = clientRepository;
    }

    /**
     * Method for executing the generation of a data dictonary based upon the ticket sale information belonging to a client
     * @date 6/5/2023 - 11:53:25 AM
     *
     * @public Marks this method as having "public" visibility
     * @async Marks this method as being asynchronous
     * @param {number} clientCpf CPF number of the client
     * @returns {string} (clientInfo, clientTicketList, ticketsPerClientInfo) -> information tables of the client, all of their tickets and the information generated by the sum of the purchases (count and total amount paid)
     */
    public async execute (clientCpf: number){
        //Obtains a list with all the tickets for a specific client
        const clientTicketList: any = await this.ticketRepository.findAllTickets(clientCpf);
        
        //Checks for the existence of the client and recovers their information, if possible
        const client: any = await this.clientRepository.findOneClient(clientCpf);

        //Client needs to exist
        if(!client) {
            throw new ApiError("Cliente n√£o encontrado", 400);
        }

        //Variables for counting the total number of tickets purchased as well as the sum of their values
        var totalTicketsBought = 0;
        var totalPaymentSum = 0;
        
        //Loops through every ticket in the list
        for (var index in clientTicketList) {
            totalTicketsBought += 1;

            const actualTicket = clientTicketList[index];
            totalPaymentSum += actualTicket.value;
        }

        //Table with 
        const ticketsPerClientInfo = {
            totalTicketsBought: totalTicketsBought,
            totalPaymentSum: totalPaymentSum
        }

        //Table with the client's non-sensitive and relevant-for-report data
        const clientInfo = {
            cpf: client.cpf,
            name: client.nome,
            email: client.email,
            phone: client.telefone
        }

        //Returns the full info table
        return { clientInfo, clientTicketList, ticketsPerClientInfo };
    }

}

export { GenerateClientTicketReportUseCase };